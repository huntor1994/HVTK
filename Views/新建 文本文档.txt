
			int imageDims[3];
			for (int i = 0; i < 3; i++)
			{
				// make them all share the same reslice cursor object.
				vtkResliceCursorLineRepresentation* rep = vtkResliceCursorLineRepresentation::SafeDownCast(
					riw[i]->GetResliceCursorWidget()->GetRepresentation());
				riw[i]->SetResliceCursor(riw[0]->GetResliceCursor());

				rep->GetResliceCursorActor()->GetCursorAlgorithm()->SetReslicePlaneNormal(i);

				riw[i]->SetInputData(metaReader->GetOutput());
				riw[i]->SetSliceOrientation(i);
				riw[i]->SetResliceModeToAxisAligned();
			}

			vtkNew<vtkCellPicker> picker;
			picker->SetTolerance(0.005);

			vtkNew<vtkProperty> ipwProp;

			vtkNew<vtkRenderer> ren;

			vtkNew<vtkGenericOpenGLRenderWindow> renderWindow;
			//this->ui->view4->setRenderWindow(renderWindow);
			//this->ui->view4->renderWindow()->AddRenderer(ren);
			vtkRenderWindowInteractor* iren = renWin[3]->GetInteractor();
			
			for (int i = 0; i < 3; i++)
			{
				riw[i]->GetRenderer()->SetBackground(0.24, 0.24, 0.24);
				riw[i]->GetRenderer()->SetBackground2(0.1, 0.1, 0.1);
				riw[i]->GetRenderer()->SetGradientBackground(true);
				riw[i]->SetRenderWindow(renWin[i]);
			}
			//获取切片图像
			for (int i = 0; i < 3; i++)
			{
				planeWidget[i]->SetInteractor(iren);
				planeWidget[i]->SetPicker(picker);
				planeWidget[i]->RestrictPlaneToVolumeOn();
				double color[3] = { 0, 0, 0 };
				color[i] = 1;
				planeWidget[i]->GetPlaneProperty()->SetColor(color);

				color[0] /= 4.0;
				color[1] /= 4.0;
				color[2] /= 4.0;
				riw[i]->GetRenderer()->SetBackground(color);

				planeWidget[i]->SetTexturePlaneProperty(ipwProp);
				planeWidget[i]->TextureInterpolateOff();
				planeWidget[i]->SetResliceInterpolateToLinear();
				planeWidget[i]->SetInputConnection(metaReader->GetOutputPort());
				planeWidget[i]->SetPlaneOrientation(i);
				planeWidget[i]->SetSliceIndex(imageDims[i] / 2);
				planeWidget[i]->DisplayTextOn();
				planeWidget[i]->SetDefaultRenderer(ren);
				planeWidget[i]->SetWindowLevel(1358, -27);
				planeWidget[i]->On();
				planeWidget[i]->InteractionOn();
			}

			vtkSmartPointer<vtkResliceCursorCallback> cbk = vtkSmartPointer<vtkResliceCursorCallback>::New();

			for (int i = 0; i < 3; i++)
			{
				cbk->IPW[i] = planeWidget[i];
				cbk->RCW[i] = riw[i]->GetResliceCursorWidget();
				riw[i]->GetResliceCursorWidget()->AddObserver(
					vtkResliceCursorWidget::ResliceAxesChangedEvent, cbk);
				riw[i]->GetResliceCursorWidget()->AddObserver(vtkResliceCursorWidget::WindowLevelEvent, cbk);
				riw[i]->GetResliceCursorWidget()->AddObserver(
					vtkResliceCursorWidget::ResliceThicknessChangedEvent, cbk);
				riw[i]->GetResliceCursorWidget()->AddObserver(vtkResliceCursorWidget::ResetCursorEvent, cbk);
				
				riw[i]->GetInteractorStyle()->AddObserver(vtkCommand::WindowLevelEvent, cbk);
				riw[i]->AddObserver(vtkResliceImageViewer::SliceChangedEvent, cbk);

				// Make them all share the same color map.
				riw[i]->SetLookupTable(riw[0]->GetLookupTable());
				planeWidget[i]->GetColorMap()->SetLookupTable(riw[0]->GetLookupTable());
				// planeWidget[i]->GetColorMap()->SetInput(riw[i]->GetResliceCursorWidget()->GetResliceCursorRepresentation()->GetColorMap()->GetInput());
				planeWidget[i]->SetColorMap(
					riw[i]->GetResliceCursorWidget()->GetResliceCursorRepresentation()->GetColorMap());
			}

			//viewer2->SetInputData(stlReader->GetOutput());

			//viewer2->SetSlice(50);
			//viewer2->SetSliceOrientationToXY();